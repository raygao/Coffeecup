/*
 * Brew.java 1.1 April 07, 2003
 * see copyright.txt for copyright issues.
 *
 */

//iteration #1
//Brew parses the XML application descriptor file.

package coffeecup4j;

import java.io.*;
import java.util.*;

import org.xml.sax.*;
import org.xml.sax.helpers.DefaultHandler;

import javax.xml.parsers.SAXParserFactory;
import javax.xml.parsers.ParserConfigurationException;
import javax.xml.parsers.SAXParser;

public class Brew extends DefaultHandler
{
    private StringBuffer textBuffer;
    private StringBuffer classpath;
    private Properties properties;
    private StringBuffer arguments;
    static private Writer out;

    private StringBuffer logfileName;
    private Log log;
    private StringBuffer target;

    public static void main(String argv[])
    {
        if (argv.length < 1) {
            System.err.println("Usage: Brew <filename.xml>");
            System.exit(1);
        }

        // Use an instance of ourselves as the SAX event handler
        Brew brew = new Brew(); 	//Creating Default handler
        brew.exec(argv);

        System.exit(0);
    }

    
    public void exec (String _argv[]) {
    
     
     // Use the default (non-validating) parser
        SAXParserFactory factory = SAXParserFactory.newInstance();
        try {
            // Set up output stream
            out = new OutputStreamWriter(System.out, "UTF8");

            // Parse the input
            SAXParser saxParser = factory.newSAXParser();
            saxParser.parse( new File(_argv[0]), this);

/*        } catch (Throwable t) {
            t.printStackTrace();
        } */
        } catch (SAXParseException spe) {
           // Error generated by the parser
           System.out.println("\n*** Parsing error"
              + ", line " + spe.getLineNumber()
              + ", column " + spe.getColumnNumber()
              + ", uri " + spe.getSystemId() + "***");
           System.out.println("   " + spe.getMessage() );

           // Use the contained exception, if any
           Exception  x = spe;
           if (spe.getException() != null)
               x = spe.getException();
           x.printStackTrace();

        } catch (SAXException sxe) {
           // Error generated by this application
           // (or a parser-initialization error)
           Exception  x = sxe;
           if (sxe.getException() != null)
               x = sxe.getException();
           x.printStackTrace();

        } catch (ParserConfigurationException pce) {
            // Parser with specified options can't be built
            pce.printStackTrace();

        } catch (IOException ioe) {
           // I/O error
           ioe.printStackTrace();

        } catch (Throwable t) {
            t.printStackTrace();
        }

        log.record("--- Received following information from executing " 
        		   + this.getClass().getName() + " on " + _argv[0] + " ---\n");
        log.record("Target is --> " + this.getTarget() +"\n");
        log.record("Classpath is --> " + this.getClasspath() + "\n");
        log.record("Arguments list is --> " + this.getArguments() + "\n");
        log.record("Logfile is --> " + this.getLogfile() + "\n");
        log.record("Properties are listed as following \n");
        this.getProperties().list(log.p);
        log.close();
    }

    //===========================================================
    // classpath get and set method's
    //===========================================================
	public StringBuffer getClasspath () {
		return this.classpath;
	}
	public void setClasspath (String a) {
        if (this.classpath == null) {
           classpath = new StringBuffer(a);
           classpath.append(System.getProperty("path.separator"));
        } else {
			classpath.append(a);
			classpath.append(System.getProperty("path.separator"));
        }
	}

    //===========================================================
    // properties get and set method's
    //===========================================================
	public Properties getProperties() {
		return this.properties;
	}
	public String getPropertyValue(String name) {
		return this.properties.getProperty(name);
	}

	public void setProperty (String name, String value) {
        if (this.properties == null) {
			properties = new Properties();
			this.properties.setProperty(name, value);
        } else {
			this.properties.setProperty(name, value);
        }
	}

    //===========================================================
    // arguments get and set method's
    //===========================================================
	public StringBuffer getArguments() {
		return this.arguments;
	}
	public void setArguments(String a) {
        if (this.arguments == null) {
           arguments = new StringBuffer(a);
           arguments.append(" ");
        } else {
           arguments.append(a);
           arguments.append(" ");
        }
	}

    //===========================================================
    // target get and set method's
    //===========================================================
	public StringBuffer getTarget() {
		return this.target;
	}
	public void setTarget(String a) {
        if (this.target == null) {
           target = new StringBuffer(a);
        } else {
           target.append(a);
        }
	}

    //===========================================================
    // logifle get and set method's
    //===========================================================
	public StringBuffer getLogfile() {
		return this.logfileName;
	}
	public void setLogfile(String a) {
        if (this.logfileName == null) {
           logfileName = new StringBuffer(a);
           log = new Log(logfileName.toString());
		}
	}

    //===========================================================
    // DocumentHandler's setDocumentLocator method
    //===========================================================

    public void setDocumentLocator(Locator l)
    {
        // Save this to resolve relative URIs or to give diagnostics.
        try {
          out.write("\nLOCATOR is turned on.\n" );
          out.write("Input XML file name: " + l.getSystemId() + "\n\n" );
          out.flush();
        } catch (IOException e) {
            // Ignore errors
        }
    }

    //===========================================================
    // DocumentHandler's warning method
    //===========================================================

    public void warning(SAXParseException err)
    throws SAXParseException
    {
        System.out.println("*** Warning"
            + ", line " + err.getLineNumber()
            + ", uri " + err.getSystemId() + "***\n");
        System.out.println("   " + err.getMessage());
    }

    //===========================================================
    // SAX DocumentHandler methods
    //===========================================================

    public void startDocument()
    throws SAXException
    {
        emit("***Started parsing document***\n\n");
        emit("<?xml version='1.0' encoding='UTF-8'?>");
        nl();
    }

    public void endDocument()
    throws SAXException
    {
        try {
			emit("\n***Finished parsing document***\n");
            nl();
            out.flush();
        } catch (IOException e) {
            throw new SAXException("I/O error", e);
        }
    }

    public void startElement(String namespaceURI,
                             String sName, // simple name
                             String qName, // qualified name
                             Attributes attrs)
    throws SAXException
    {
        echoText();
        String eName = sName; // element name
        if ("".equals(eName)) eName = qName; // not namespaceAware
        emit("<"+eName);
       if (attrs != null) {
            for (int i = 0; i < attrs.getLength(); i++) {
                String aName = attrs.getLocalName(i); // Attr name
                if ("".equals(aName)) aName = attrs.getQName(i);
                emit(" ");
                emit(aName+"=\""+attrs.getValue(i)+"\"");
            }
        }
        emit(">");
//	Setting property, Must be in name="some_name" value="some_value" format
        if (attrs != null) {
			String attrName = new String ();
			attrName = attrs.getValue("name");
			String attrValue = new String ();
			attrValue = attrs.getValue("value");
			if (eName.equalsIgnoreCase("property")) setProperty(attrName, attrValue);
		}
//	End setting property
//
    }

    public void endElement(String namespaceURI,
                           String sName, // simple name
                           String qName  // qualified name
                          )
    throws SAXException
    {
    	String tmpString = new String ();
    	if (textBuffer != null) tmpString = textBuffer.toString(); // need to be placed here to check for end of element null event.
        echoText();
        String eName = sName; // element name
        if ("".equals(eName)) eName = qName; // not namespaceAware
        emit("</"+eName+">");
        nl();
//        case for Ray Gao
		if (eName.equalsIgnoreCase("target")) setTarget(new String(tmpString));
		if (eName.equalsIgnoreCase ("entry")) setClasspath(new String(tmpString));
		if (eName.equalsIgnoreCase("argument")) setArguments(new String(tmpString));
		if (eName.equalsIgnoreCase("logfile")) setLogfile(new String(tmpString));
// 		end case

    }

    public void characters(char buf[], int offset, int len)
    throws SAXException
    {
        String s = new String(buf, offset, len);
        if (textBuffer == null) {
           textBuffer = new StringBuffer(s);
        } else {
           textBuffer.append(s);
        }

        //need some stuff here
    }

    //===========================================================
    // Utility Methods ...
    //===========================================================

    // Display text accumulated in the character buffer
    private void echoText()
    throws SAXException
    {
        if (textBuffer == null) return;
        String s = ""+textBuffer;
        emit(s);
        textBuffer = null;
    }

    // Wrap I/O exceptions in SAX exceptions, to
    // suit handler signature requirements
    private void emit(String s)
    throws SAXException
    {
        try {
            out.write(s);
            out.flush();
        } catch (IOException e) {
            throw new SAXException("I/O error", e);
        }
    }

    // Start a new line
    private void nl()
    throws SAXException
    {
        String lineEnd =  System.getProperty("line.separator");
        try {
            out.write(lineEnd);
        } catch (IOException e) {
            throw new SAXException("I/O error", e);
        }
    }
}
